_target_: src.models.base_module.BaseModule
net:
  _target_: src.models.efficient_net_module.Efficient_Net
  classes: ['NRG', 'RG']
loss_fn:
  _target_: torch.nn.CrossEntropyLoss
optimizer:
  _target_: torch.optim.Adam
  _partial_: true
  lr: 1.0e-3

root_dir: /mnt/Enterprise2/shirshak/GLAUCOMA_DATASET_EYEPACS_AIROGS_ZENODO/preprocessed_separated_train_test_val/


scheduler:
  _target_: torch.optim.lr_scheduler.ReduceLROnPlateau
  _partial_: true
  factor: 0.3
  patience: 5
  

# The below doesnot work in accuracy_metric case but when we use dice metric from monai then it works passing from yaml file because dice_metric 
# from monai is stateful and can be instantiated without y_pred & y_true but accuracy_score from sklearn is stateless & cannot be instantiaetd without arguments. 

# accuracy_metric: 
#   _target_: sklearn.metrics.accuracy_score
#   normalize: true
# precision_metric: 
#   _target_: sklearn.metrics.precision_score
#   zero_division: 0.0
#   average: micro
# recall_metric: 
#   _target_: sklearn.metrics.recall_score
#   zero_division: 0.0
#   average: micro
# f1_metric: 
#   _target_: sklearn.metrics.f1_score
#   zero_division: 0.0
#   average: micro












# print(batch_data["image"].shape) # torch.Size([4, 1, 128, 128, 128]) # if batch_size=4
# print(batch_data["label"].shape) # torch.Size([4, 1, 128, 128, 128])
# in_channel is 1 ota since data ma euta batch and euta channel xa
# classes = background lagayera 5 ota xa


# CUDA_VISIBLE_DEVICES=1 python src/train.py experiment=unet.yaml experiment_name=unet_model_training